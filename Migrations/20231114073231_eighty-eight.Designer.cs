// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimesheetBE.Context;

#nullable disable

namespace TimesheetBE.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231114073231_eighty-eight")]
    partial class eightyeight
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claimValue");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("roleId");

                    b.HasKey("Id")
                        .HasName("pK_RoleClaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("iX_RoleClaims_roleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claimValue");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_UserClaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_UserClaims_userId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("loginProvider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("providerKey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("providerDisplayName");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pK_UserLogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_UserLogins_userId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("roleId");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pK_UserRoles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("iX_UserRoles_roleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("loginProvider");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pK_UserTokens");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("clientId");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("longtext")
                        .HasColumnName("clientSecret");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("concurrencyToken");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("consentType");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("displayName");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("longtext")
                        .HasColumnName("displayNames");

                    b.Property<string>("Permissions")
                        .HasColumnType("longtext")
                        .HasColumnName("permissions");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("longtext")
                        .HasColumnName("postLogoutRedirectUris");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasColumnName("properties");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("longtext")
                        .HasColumnName("redirectUris");

                    b.Property<string>("Requirements")
                        .HasColumnType("longtext")
                        .HasColumnName("requirements");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pK_OpenIddictApplications");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("iX_OpenIddictApplications_clientId");

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("applicationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("concurrencyToken");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creationDate");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasColumnName("properties");

                    b.Property<string>("Scopes")
                        .HasColumnType("longtext")
                        .HasColumnName("scopes");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pK_OpenIddictAuthorizations");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("iX_OpenIddictAuthorizations_applicationId_status_subject_type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("concurrencyToken");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Descriptions")
                        .HasColumnType("longtext")
                        .HasColumnName("descriptions");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("displayName");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("longtext")
                        .HasColumnName("displayNames");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasColumnName("properties");

                    b.Property<string>("Resources")
                        .HasColumnType("longtext")
                        .HasColumnName("resources");

                    b.HasKey("Id")
                        .HasName("pK_OpenIddictScopes");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("iX_OpenIddictScopes_name");

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("applicationId");

                    b.Property<int?>("AuthorizationId")
                        .HasColumnType("int")
                        .HasColumnName("authorizationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("concurrencyToken");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creationDate");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expirationDate");

                    b.Property<string>("Payload")
                        .HasColumnType("longtext")
                        .HasColumnName("payload");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasColumnName("properties");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("redemptionDate");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("referenceId");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pK_OpenIddictTokens");

                    b.HasIndex("AuthorizationId")
                        .HasDatabaseName("iX_OpenIddictTokens_authorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasDatabaseName("iX_OpenIddictTokens_referenceId");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("iX_OpenIddictTokens_applicationId_status_subject_type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Code", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CodeString")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codeString");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiryDate");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isExpired");

                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("key");

                    b.Property<string>("Token")
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_codes");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_codes_userId");

                    b.ToTable("codes", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Document")
                        .HasColumnType("longtext")
                        .HasColumnName("document");

                    b.Property<Guid>("EmployeeInformationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("employeeInformationId");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("endDate");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("startDate");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pK_contracts");

                    b.HasIndex("EmployeeInformationId")
                        .HasDatabaseName("iX_contracts_employeeInformationId");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("iX_contracts_statusId");

                    b.ToTable("contracts", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ControlSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<bool>("AdminCanApproveExpense")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminCanApproveExpense");

                    b.Property<bool>("AdminCanApprovePayrolls")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminCanApprovePayrolls");

                    b.Property<bool>("AdminCanApproveTimesheet")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminCanApproveTimesheet");

                    b.Property<bool>("AdminCanViewClientInvoice")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminCanViewClientInvoice");

                    b.Property<bool>("AdminCanViewPaymentPartnerInvoice")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminCanViewPaymentPartnerInvoice");

                    b.Property<bool>("AdminCanViewPayrolls")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminCanViewPayrolls");

                    b.Property<bool>("AdminCanViewTeamMemberInvoice")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminCanViewTeamMemberInvoice");

                    b.Property<bool>("AdminContractManagement")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminContractManagement");

                    b.Property<bool>("AdminExpenseTypeAndHST")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminExpenseTypeAndHST");

                    b.Property<bool>("AdminLeaveManagement")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminLeaveManagement");

                    b.Property<bool>("AdminOBoarding")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminOBoarding");

                    b.Property<bool>("AdminReport")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminReport");

                    b.Property<bool>("AdminShiftManagement")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("adminShiftManagement");

                    b.Property<bool>("AllowIneligibleLeaveCode")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allowIneligibleLeaveCode");

                    b.Property<bool>("AllowShiftSwapApproval")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allowShiftSwapApproval");

                    b.Property<bool>("AllowShiftSwapRequest")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allowShiftSwapRequest");

                    b.Property<bool>("AllowUsersTofillFutureTimesheet")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allowUsersTofillFutureTimesheet");

                    b.Property<DateTime?>("BiWeeklyBeginingPeriodDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("biWeeklyBeginingPeriodDate");

                    b.Property<int?>("BiWeeklyPaymentPeriod")
                        .HasColumnType("int")
                        .HasColumnName("biWeeklyPaymentPeriod");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<bool>("IsMonthlyPayScheduleFullMonth")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isMonthlyPayScheduleFullMonth");

                    b.Property<int?>("MonthlyPaymentPeriod")
                        .HasColumnType("int")
                        .HasColumnName("monthlyPaymentPeriod");

                    b.Property<DateTime?>("MontlyBeginingPeriodDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("montlyBeginingPeriodDate");

                    b.Property<Guid>("SuperAdminId")
                        .HasColumnType("char(36)")
                        .HasColumnName("superAdminId");

                    b.Property<int?>("TimesheetFillingReminderDay")
                        .HasColumnType("int")
                        .HasColumnName("timesheetFillingReminderDay");

                    b.Property<int?>("TimesheetOverdueReminderDay")
                        .HasColumnType("int")
                        .HasColumnName("timesheetOverdueReminderDay");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("twoFactorEnabled");

                    b.Property<DateTime?>("WeeklyBeginingPeriodDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("weeklyBeginingPeriodDate");

                    b.Property<int?>("WeeklyPaymentPeriod")
                        .HasColumnType("int")
                        .HasColumnName("weeklyPaymentPeriod");

                    b.HasKey("Id")
                        .HasName("pK_controlSettings");

                    b.ToTable("controlSettings", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.EmployeeInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("clientId");

                    b.Property<double?>("ClientRate")
                        .HasColumnType("double")
                        .HasColumnName("clientRate");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext")
                        .HasColumnName("currency");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("EmployeeType")
                        .HasColumnType("longtext")
                        .HasColumnName("employeeType");

                    b.Property<bool>("EnableFinancials")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enableFinancials");

                    b.Property<bool>("FixedAmount")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("fixedAmount");

                    b.Property<int>("HoursPerDay")
                        .HasColumnType("int")
                        .HasColumnName("hoursPerDay");

                    b.Property<int>("HstNumber")
                        .HasColumnType("int")
                        .HasColumnName("hstNumber");

                    b.Property<string>("InCorporationDocumentUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("inCorporationDocumentUrl");

                    b.Property<string>("InsuranceDocumentUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("insuranceDocumentUrl");

                    b.Property<string>("InvoiceGenerationType")
                        .HasColumnType("longtext")
                        .HasColumnName("invoiceGenerationType");

                    b.Property<bool?>("IsEligibleForLeave")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isEligibleForLeave");

                    b.Property<string>("JobTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("jobTitle");

                    b.Property<double?>("MonthlyPayoutRate")
                        .HasColumnType("double")
                        .HasColumnName("monthlyPayoutRate");

                    b.Property<int?>("NumberOfDaysEligible")
                        .HasColumnType("int")
                        .HasColumnName("numberOfDaysEligible");

                    b.Property<int>("NumberOfEligibleLeaveDaysTaken")
                        .HasColumnType("int")
                        .HasColumnName("numberOfEligibleLeaveDaysTaken");

                    b.Property<int?>("NumberOfHoursEligible")
                        .HasColumnType("int")
                        .HasColumnName("numberOfHoursEligible");

                    b.Property<double>("OnBoradingFee")
                        .HasColumnType("double")
                        .HasColumnName("onBoradingFee");

                    b.Property<int>("PayRollTypeId")
                        .HasColumnType("int")
                        .HasColumnName("payRollTypeId");

                    b.Property<string>("PaymentFrequency")
                        .HasColumnType("longtext")
                        .HasColumnName("paymentFrequency");

                    b.Property<Guid?>("PaymentPartnerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("paymentPartnerId");

                    b.Property<string>("PaymentRate")
                        .HasColumnType("longtext")
                        .HasColumnName("paymentRate");

                    b.Property<double>("RatePerHour")
                        .HasColumnType("double")
                        .HasColumnName("ratePerHour");

                    b.Property<Guid?>("SupervisorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("supervisorId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.Property<string>("VoidCheckUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("voidCheckUrl");

                    b.HasKey("Id")
                        .HasName("pK_employeeInformation");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("iX_employeeInformation_clientId");

                    b.HasIndex("PayRollTypeId")
                        .HasDatabaseName("iX_employeeInformation_payRollTypeId");

                    b.HasIndex("PaymentPartnerId")
                        .HasDatabaseName("iX_employeeInformation_paymentPartnerId");

                    b.HasIndex("SupervisorId")
                        .HasDatabaseName("iX_employeeInformation_supervisorId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("iX_employeeInformation_userId");

                    b.ToTable("employeeInformation", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("createdByUserId");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext")
                        .HasColumnName("currency");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ExpenseDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expenseDate");

                    b.Property<Guid>("ExpenseTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("expenseTypeId");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("invoiceId");

                    b.Property<Guid?>("InvoiceId1")
                        .HasColumnType("char(36)")
                        .HasColumnName("invoiceId1");

                    b.Property<bool?>("IsInvoiced")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isInvoiced");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.Property<Guid>("TeamMemberId")
                        .HasColumnType("char(36)")
                        .HasColumnName("teamMemberId");

                    b.HasKey("Id")
                        .HasName("pK_expenses");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("iX_expenses_createdByUserId");

                    b.HasIndex("ExpenseTypeId")
                        .HasDatabaseName("iX_expenses_expenseTypeId");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("iX_expenses_invoiceId");

                    b.HasIndex("InvoiceId1")
                        .IsUnique()
                        .HasDatabaseName("iX_expenses_invoiceId1");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("iX_expenses_statusId");

                    b.HasIndex("TeamMemberId")
                        .HasDatabaseName("iX_expenses_teamMemberId");

                    b.ToTable("expenses", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ExpenseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.Property<Guid?>("SuperAdminId")
                        .HasColumnType("char(36)")
                        .HasColumnName("superAdminId");

                    b.HasKey("Id")
                        .HasName("pK_expenseTypes");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("iX_expenseTypes_statusId");

                    b.ToTable("expenseTypes", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("clientId");

                    b.Property<Guid?>("ClientInvoiceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("clientInvoiceId");

                    b.Property<double?>("ClientTotalAmount")
                        .HasColumnType("double")
                        .HasColumnName("clientTotalAmount");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("createdByUserId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<Guid?>("EmployeeInformationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("employeeInformationId");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("endDate");

                    b.Property<double?>("HST")
                        .HasColumnType("double")
                        .HasColumnName("hST");

                    b.Property<string>("InvoiceReference")
                        .HasColumnType("longtext")
                        .HasColumnName("invoiceReference");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("invoiceTypeId");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("parentId");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paymentDate");

                    b.Property<Guid?>("PaymentPartnerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("paymentPartnerId");

                    b.Property<string>("Rate")
                        .HasColumnType("longtext")
                        .HasColumnName("rate");

                    b.Property<bool>("Rejected")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("rejected");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("longtext")
                        .HasColumnName("rejectionReason");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("startDate");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double")
                        .HasColumnName("totalAmount");

                    b.Property<int>("TotalHours")
                        .HasColumnType("int")
                        .HasColumnName("totalHours");

                    b.HasKey("Id")
                        .HasName("pK_invoices");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("iX_invoices_clientId");

                    b.HasIndex("ClientInvoiceId")
                        .HasDatabaseName("iX_invoices_clientInvoiceId");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("iX_invoices_createdByUserId");

                    b.HasIndex("EmployeeInformationId")
                        .HasDatabaseName("iX_invoices_employeeInformationId");

                    b.HasIndex("InvoiceTypeId")
                        .HasDatabaseName("iX_invoices_invoiceTypeId");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("iX_invoices_parentId");

                    b.HasIndex("PaymentPartnerId")
                        .HasDatabaseName("iX_invoices_paymentPartnerId");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("iX_invoices_statusId");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.InvoiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_invoiceTypes");

                    b.ToTable("invoiceTypes", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Leave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("approvalDate");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<Guid>("EmployeeInformationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("employeeInformationId");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("endDate");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isCanceled");

                    b.Property<Guid>("LeaveTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("leaveTypeId");

                    b.Property<string>("ReasonForLeave")
                        .HasColumnType("longtext")
                        .HasColumnName("reasonForLeave");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("startDate");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.Property<Guid?>("WorkAssigneeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("workAssigneeId");

                    b.HasKey("Id")
                        .HasName("pK_leaves");

                    b.HasIndex("EmployeeInformationId")
                        .HasDatabaseName("iX_leaves_employeeInformationId");

                    b.HasIndex("LeaveTypeId")
                        .HasDatabaseName("iX_leaves_leaveTypeId");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("iX_leaves_statusId");

                    b.HasIndex("WorkAssigneeId")
                        .HasDatabaseName("iX_leaves_workAssigneeId");

                    b.ToTable("leaves", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.LeaveConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<int>("EligibleLeaveDays")
                        .HasColumnType("int")
                        .HasColumnName("eligibleLeaveDays");

                    b.Property<bool>("IsStandardEligibleDays")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isStandardEligibleDays");

                    b.Property<Guid?>("SuperAdminId")
                        .HasColumnType("char(36)")
                        .HasColumnName("superAdminId");

                    b.HasKey("Id")
                        .HasName("pK_leaveConfigurations");

                    b.ToTable("leaveConfigurations", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.LeaveType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("LeaveTypeIcon")
                        .HasColumnType("longtext")
                        .HasColumnName("leaveTypeIcon");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<Guid?>("superAdminId")
                        .HasColumnType("char(36)")
                        .HasColumnName("superAdminId");

                    b.HasKey("Id")
                        .HasName("pK_leaveTypes");

                    b.ToTable("leaveTypes", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext")
                        .HasColumnName("icon");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isRead");

                    b.Property<string>("Message")
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasColumnType("longtext")
                        .HasColumnName("url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_notifications");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_notifications_userId");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.OnboardingFee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<double>("Fee")
                        .HasColumnType("double")
                        .HasColumnName("fee");

                    b.Property<string>("OnboardingFeeType")
                        .HasColumnType("longtext")
                        .HasColumnName("onboardingFeeType");

                    b.Property<Guid?>("SuperAdminId")
                        .HasColumnType("char(36)")
                        .HasColumnName("superAdminId");

                    b.HasKey("Id")
                        .HasName("pK_onboardingFees");

                    b.ToTable("onboardingFees", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.PaymentSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("approvalDate");

                    b.Property<int>("Cycle")
                        .HasColumnType("int")
                        .HasColumnName("cycle");

                    b.Property<string>("CycleType")
                        .HasColumnType("longtext")
                        .HasColumnName("cycleType");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<DateTime>("LastWorkDayOfCycle")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lastWorkDayOfCycle");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paymentDate");

                    b.Property<Guid?>("SuperAdminId")
                        .HasColumnType("char(36)")
                        .HasColumnName("superAdminId");

                    b.Property<DateTime>("WeekDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("weekDate");

                    b.HasKey("Id")
                        .HasName("pK_paymentSchedules");

                    b.ToTable("paymentSchedules", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Payroll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<Guid>("EmployeeInformationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("employeeInformationId");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("endDate");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("invoiceId");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("PayRollTypeId")
                        .HasColumnType("int")
                        .HasColumnName("payRollTypeId");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paymentDate");

                    b.Property<Guid?>("PaymentPartnerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("paymentPartnerId");

                    b.Property<double>("Rate")
                        .HasColumnType("double")
                        .HasColumnName("rate");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("startDate");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double")
                        .HasColumnName("totalAmount");

                    b.Property<int>("TotalHours")
                        .HasColumnType("int")
                        .HasColumnName("totalHours");

                    b.HasKey("Id")
                        .HasName("pK_payrolls");

                    b.HasIndex("EmployeeInformationId")
                        .HasDatabaseName("iX_payrolls_employeeInformationId");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("iX_payrolls_invoiceId");

                    b.HasIndex("PayRollTypeId")
                        .HasDatabaseName("iX_payrolls_payRollTypeId");

                    b.HasIndex("PaymentPartnerId")
                        .HasDatabaseName("iX_payrolls_paymentPartnerId");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("iX_payrolls_statusId");

                    b.ToTable("payrolls", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.PayrollGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_payrollGroups");

                    b.ToTable("payrollGroups", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.PayRollType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_payRollTypes");

                    b.ToTable("payRollTypes", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.PaySlip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<Guid?>("EmployeeInformationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("employeeInformationId");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("endDate");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("invoiceId");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paymentDate");

                    b.Property<string>("Rate")
                        .HasColumnType("longtext")
                        .HasColumnName("rate");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("startDate");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double")
                        .HasColumnName("totalAmount");

                    b.Property<int>("TotalHours")
                        .HasColumnType("int")
                        .HasColumnName("totalHours");

                    b.HasKey("Id")
                        .HasName("pK_paySlips");

                    b.HasIndex("EmployeeInformationId")
                        .HasDatabaseName("iX_paySlips_employeeInformationId");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("iX_paySlips_invoiceId");

                    b.ToTable("paySlips", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("budget");

                    b.Property<decimal>("BudgetSpent")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("budgetSpent");

                    b.Property<decimal?>("BudgetThreshold")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("budgetThreshold");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("DocumentURL")
                        .HasColumnType("longtext")
                        .HasColumnName("documentURL");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("endDate");

                    b.Property<double>("HoursSpent")
                        .HasColumnType("double")
                        .HasColumnName("hoursSpent");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isCompleted");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("startDate");

                    b.Property<Guid>("SuperAdminId")
                        .HasColumnType("char(36)")
                        .HasColumnName("superAdminId");

                    b.HasKey("Id")
                        .HasName("pK_projects");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ProjectSubTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<double?>("DurationInHours")
                        .HasColumnType("double")
                        .HasColumnName("durationInHours");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("endDate");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isCompleted");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<double>("PercentageOfCompletion")
                        .HasColumnType("double")
                        .HasColumnName("percentageOfCompletion");

                    b.Property<Guid>("ProjectTaskAsigneeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("projectTaskAsigneeId");

                    b.Property<Guid>("ProjectTaskId")
                        .HasColumnType("char(36)")
                        .HasColumnName("projectTaskId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("startDate");

                    b.Property<string>("TaskPriority")
                        .HasColumnType("longtext")
                        .HasColumnName("taskPriority");

                    b.Property<bool>("TrackedByHours")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("trackedByHours");

                    b.HasKey("Id")
                        .HasName("pK_projectSubTasks");

                    b.HasIndex("ProjectTaskAsigneeId")
                        .HasDatabaseName("iX_projectSubTasks_projectTaskAsigneeId");

                    b.HasIndex("ProjectTaskId")
                        .HasDatabaseName("iX_projectSubTasks_projectTaskId");

                    b.ToTable("projectSubTasks", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ProjectTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasColumnType("longtext")
                        .HasColumnName("category");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Department")
                        .HasColumnType("longtext")
                        .HasColumnName("department");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<double>("DurationInHours")
                        .HasColumnType("double")
                        .HasColumnName("durationInHours");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("endDate");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isCompleted");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<double>("PercentageOfCompletion")
                        .HasColumnType("double")
                        .HasColumnName("percentageOfCompletion");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)")
                        .HasColumnName("projectId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("startDate");

                    b.Property<Guid>("SuperAdminId")
                        .HasColumnType("char(36)")
                        .HasColumnName("superAdminId");

                    b.Property<string>("TaskPriority")
                        .HasColumnType("longtext")
                        .HasColumnName("taskPriority");

                    b.Property<bool>("TrackedByHours")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("trackedByHours");

                    b.HasKey("Id")
                        .HasName("pK_projectTasks");

                    b.ToTable("projectTasks", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ProjectTaskAsignee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("budget");

                    b.Property<decimal?>("BudgetSpent")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("budgetSpent");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("disabled");

                    b.Property<double>("HoursLogged")
                        .HasColumnType("double")
                        .HasColumnName("hoursLogged");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)")
                        .HasColumnName("projectId");

                    b.Property<Guid?>("ProjectTaskId")
                        .HasColumnType("char(36)")
                        .HasColumnName("projectTaskId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_projectTaskAsignees");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("iX_projectTaskAsignees_projectId");

                    b.HasIndex("ProjectTaskId")
                        .HasDatabaseName("iX_projectTaskAsignees_projectTaskId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_projectTaskAsignees_userId");

                    b.ToTable("projectTaskAsignees", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ProjectTimesheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<decimal>("AmountEarned")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amountEarned");

                    b.Property<bool>("Billable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("billable");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("endDate");

                    b.Property<double>("PercentageOfCompletion")
                        .HasColumnType("double")
                        .HasColumnName("percentageOfCompletion");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)")
                        .HasColumnName("projectId");

                    b.Property<Guid?>("ProjectSubTaskId")
                        .HasColumnType("char(36)")
                        .HasColumnName("projectSubTaskId");

                    b.Property<Guid>("ProjectTaskAsigneeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("projectTaskAsigneeId");

                    b.Property<Guid?>("ProjectTaskId")
                        .HasColumnType("char(36)")
                        .HasColumnName("projectTaskId");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("startDate");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.Property<double>("TotalHours")
                        .HasColumnType("double")
                        .HasColumnName("totalHours");

                    b.HasKey("Id")
                        .HasName("pK_projectTimesheets");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("iX_projectTimesheets_projectId");

                    b.HasIndex("ProjectSubTaskId")
                        .HasDatabaseName("iX_projectTimesheets_projectSubTaskId");

                    b.HasIndex("ProjectTaskAsigneeId")
                        .HasDatabaseName("iX_projectTimesheets_projectTaskAsigneeId");

                    b.HasIndex("ProjectTaskId")
                        .HasDatabaseName("iX_projectTimesheets_projectTaskId");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("iX_projectTimesheets_statusId");

                    b.ToTable("projectTimesheets", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .HasColumnType("longtext")
                        .HasColumnName("color");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end");

                    b.Property<int>("Hours")
                        .HasColumnType("int")
                        .HasColumnName("hours");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isPublished");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<string>("RepeatQuery")
                        .HasColumnType("longtext")
                        .HasColumnName("repeatQuery");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_shifts");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_shifts_userId");

                    b.ToTable("shifts", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ShiftType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .HasColumnType("longtext")
                        .HasColumnName("color");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<string>("End")
                        .HasColumnType("longtext")
                        .HasColumnName("end");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Start")
                        .HasColumnType("longtext")
                        .HasColumnName("start");

                    b.Property<Guid?>("SuperAdminId")
                        .HasColumnType("char(36)")
                        .HasColumnName("superAdminId");

                    b.HasKey("Id")
                        .HasName("pK_shiftTypes");

                    b.ToTable("shiftTypes", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_statuses");

                    b.ToTable("statuses", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Swap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isApproved");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("char(36)")
                        .HasColumnName("shiftId");

                    b.Property<Guid>("ShiftToSwapId")
                        .HasColumnType("char(36)")
                        .HasColumnName("shiftToSwapId");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.Property<Guid>("SwapeeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("swapeeId");

                    b.Property<Guid>("SwapperId")
                        .HasColumnType("char(36)")
                        .HasColumnName("swapperId");

                    b.HasKey("Id")
                        .HasName("pK_swaps");

                    b.HasIndex("ShiftId")
                        .HasDatabaseName("iX_swaps_shiftId");

                    b.HasIndex("ShiftToSwapId")
                        .HasDatabaseName("iX_swaps_shiftToSwapId");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("iX_swaps_statusId");

                    b.HasIndex("SwapeeId")
                        .HasDatabaseName("iX_swaps_swapeeId");

                    b.HasIndex("SwapperId")
                        .HasDatabaseName("iX_swaps_swapperId");

                    b.ToTable("swaps", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.TimeSheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<Guid>("EmployeeInformationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("employeeInformationId");

                    b.Property<int>("Hours")
                        .HasColumnType("int")
                        .HasColumnName("hours");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isApproved");

                    b.Property<bool>("OnLeave")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("onLeave");

                    b.Property<bool>("OnLeaveAndEligibleForLeave")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("onLeaveAndEligibleForLeave");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("longtext")
                        .HasColumnName("rejectionReason");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.HasKey("Id")
                        .HasName("pK_timeSheets");

                    b.HasIndex("EmployeeInformationId")
                        .HasDatabaseName("iX_timeSheets_employeeInformationId");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("iX_timeSheets_statusId");

                    b.ToTable("timeSheets", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.IdentityModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalizedName");

                    b.HasKey("Id")
                        .HasName("pK_Roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("TimesheetBE.Models.IdentityModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("accessFailedCount");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("clientId");

                    b.Property<Guid?>("ClientSubscriptionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("clientSubscriptionId");

                    b.Property<bool?>("ClientSubscriptionStatus")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("clientSubscriptionStatus");

                    b.Property<Guid?>("CommandCenterClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("commandCenterClientId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrencyStamp");

                    b.Property<Guid?>("ControlSettingId")
                        .HasColumnType("char(36)")
                        .HasColumnName("controlSettingId");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("char(36)")
                        .HasColumnName("createdById");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("emailConfirmed");

                    b.Property<Guid?>("EmployeeInformationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("employeeInformationId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("firstName");

                    b.Property<string>("InvoiceGenerationFrequency")
                        .HasColumnType("longtext")
                        .HasColumnName("invoiceGenerationFrequency");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("lastName");

                    b.Property<Guid?>("LeaveConfigurationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("leaveConfigurationId");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalizedUserName");

                    b.Property<string>("OrganizationAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("organizationAddress");

                    b.Property<string>("OrganizationEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("organizationEmail");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("longtext")
                        .HasColumnName("organizationName");

                    b.Property<string>("OrganizationPhone")
                        .HasColumnType("longtext")
                        .HasColumnName("organizationPhone");

                    b.Property<string>("OtherNames")
                        .HasColumnType("longtext")
                        .HasColumnName("otherNames");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("passwordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phoneNumberConfirmed");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext")
                        .HasColumnName("profilePicture");

                    b.Property<string>("Role")
                        .HasColumnType("longtext")
                        .HasColumnName("role");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("securityStamp");

                    b.Property<Guid?>("SuperAdminId")
                        .HasColumnType("char(36)")
                        .HasColumnName("superAdminId");

                    b.Property<int?>("Term")
                        .HasColumnType("int")
                        .HasColumnName("term");

                    b.Property<Guid?>("TwoFactorCode")
                        .HasColumnType("char(36)")
                        .HasColumnName("twoFactorCode");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("twoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("userName");

                    b.HasKey("Id")
                        .HasName("pK_Users");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("iX_Users_clientId");

                    b.HasIndex("CreatedById")
                        .IsUnique()
                        .HasDatabaseName("iX_Users_createdById");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SuperAdminId")
                        .HasDatabaseName("iX_Users_superAdminId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TimesheetBE.Models.IdentityModels.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_RoleClaims_Roles_roleId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TimesheetBE.Models.IdentityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserClaims_Users_userId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TimesheetBE.Models.IdentityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserLogins_Users_userId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TimesheetBE.Models.IdentityModels.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserRoles_Roles_roleId");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserRoles_Users_userId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TimesheetBE.Models.IdentityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserTokens_Users_userId");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fK_OpenIddictAuthorizations_OpenIddictApplications_applicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken<int>", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fK_OpenIddictTokens_OpenIddictApplications_applicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId")
                        .HasConstraintName("fK_OpenIddictTokens_OpenIddictAuthorizations_authorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Code", b =>
                {
                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fK_codes_users_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Contract", b =>
                {
                    b.HasOne("TimesheetBE.Models.AppModels.EmployeeInformation", "EmployeeInformation")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_contracts_employeeInformation_employeeInformationId");

                    b.HasOne("TimesheetBE.Models.AppModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_contracts_statuses_statusId");

                    b.Navigation("EmployeeInformation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.EmployeeInformation", b =>
                {
                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "Client")
                        .WithMany("TeamMembers")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fK_employeeInformation_Users_clientId1");

                    b.HasOne("TimesheetBE.Models.AppModels.PayRollType", "PayrollType")
                        .WithMany()
                        .HasForeignKey("PayRollTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_employeeInformation_payRollTypes_payRollTypeId");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "PaymentPartner")
                        .WithMany("Payees")
                        .HasForeignKey("PaymentPartnerId")
                        .HasConstraintName("fK_employeeInformation_Users_paymentPartnerId");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "Supervisor")
                        .WithMany("Supervisees")
                        .HasForeignKey("SupervisorId")
                        .HasConstraintName("fK_employeeInformation_Users_supervisorId1");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "User")
                        .WithOne("EmployeeInformation")
                        .HasForeignKey("TimesheetBE.Models.AppModels.EmployeeInformation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_employeeInformation_Users_userId");

                    b.Navigation("Client");

                    b.Navigation("PaymentPartner");

                    b.Navigation("PayrollType");

                    b.Navigation("Supervisor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Expense", b =>
                {
                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_expenses_users_createdByUserId");

                    b.HasOne("TimesheetBE.Models.AppModels.ExpenseType", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_expenses_expenseTypes_expenseTypeId");

                    b.HasOne("TimesheetBE.Models.AppModels.Invoice", "Invoice")
                        .WithMany("Expenses")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("fK_expenses_invoices_invoiceId");

                    b.HasOne("TimesheetBE.Models.AppModels.Invoice", null)
                        .WithOne("Expense")
                        .HasForeignKey("TimesheetBE.Models.AppModels.Expense", "InvoiceId1")
                        .HasConstraintName("fK_expenses_invoices_invoiceId1");

                    b.HasOne("TimesheetBE.Models.AppModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_expenses_statuses_statusId");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "TeamMember")
                        .WithMany()
                        .HasForeignKey("TeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_expenses_users_teamMemberId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ExpenseType");

                    b.Navigation("Invoice");

                    b.Navigation("Status");

                    b.Navigation("TeamMember");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ExpenseType", b =>
                {
                    b.HasOne("TimesheetBE.Models.AppModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_expenseTypes_statuses_statusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Invoice", b =>
                {
                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fK_invoices_users_clientId");

                    b.HasOne("TimesheetBE.Models.AppModels.Invoice", "ClientInvoice")
                        .WithMany("ClientInvoiceChildren")
                        .HasForeignKey("ClientInvoiceId")
                        .HasConstraintName("fK_invoices_invoices_clientInvoiceId");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("fK_invoices_users_createdByUserId");

                    b.HasOne("TimesheetBE.Models.AppModels.EmployeeInformation", "EmployeeInformation")
                        .WithMany()
                        .HasForeignKey("EmployeeInformationId")
                        .HasConstraintName("fK_invoices_employeeInformation_employeeInformationId");

                    b.HasOne("TimesheetBE.Models.AppModels.InvoiceType", "InvoiceType")
                        .WithMany()
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_invoices_invoiceTypes_invoiceTypeId");

                    b.HasOne("TimesheetBE.Models.AppModels.Invoice", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fK_invoices_invoices_parentId");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "PaymentPartner")
                        .WithMany()
                        .HasForeignKey("PaymentPartnerId")
                        .HasConstraintName("fK_invoices_users_paymentPartnerId");

                    b.HasOne("TimesheetBE.Models.AppModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_invoices_statuses_statusId");

                    b.Navigation("Client");

                    b.Navigation("ClientInvoice");

                    b.Navigation("CreatedByUser");

                    b.Navigation("EmployeeInformation");

                    b.Navigation("InvoiceType");

                    b.Navigation("Parent");

                    b.Navigation("PaymentPartner");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Leave", b =>
                {
                    b.HasOne("TimesheetBE.Models.AppModels.EmployeeInformation", "EmployeeInformation")
                        .WithMany()
                        .HasForeignKey("EmployeeInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_leaves_employeeInformation_employeeInformationId");

                    b.HasOne("TimesheetBE.Models.AppModels.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_leaves_leaveTypes_leaveTypeId");

                    b.HasOne("TimesheetBE.Models.AppModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_leaves_statuses_statusId");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "WorkAssignee")
                        .WithMany()
                        .HasForeignKey("WorkAssigneeId")
                        .HasConstraintName("fK_leaves_users_workAssigneeId");

                    b.Navigation("EmployeeInformation");

                    b.Navigation("LeaveType");

                    b.Navigation("Status");

                    b.Navigation("WorkAssignee");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Notification", b =>
                {
                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_notifications_users_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Payroll", b =>
                {
                    b.HasOne("TimesheetBE.Models.AppModels.EmployeeInformation", "EmployeeInformation")
                        .WithMany()
                        .HasForeignKey("EmployeeInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_payrolls_employeeInformation_employeeInformationId");

                    b.HasOne("TimesheetBE.Models.AppModels.Invoice", "Invoice")
                        .WithMany("Payrolls")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("fK_payrolls_invoices_invoiceId");

                    b.HasOne("TimesheetBE.Models.AppModels.PayRollType", "PayRollType")
                        .WithMany()
                        .HasForeignKey("PayRollTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_payrolls_payRollTypes_payRollTypeId");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "PaymentPartner")
                        .WithMany()
                        .HasForeignKey("PaymentPartnerId")
                        .HasConstraintName("fK_payrolls_users_paymentPartnerId");

                    b.HasOne("TimesheetBE.Models.AppModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_payrolls_statuses_statusId");

                    b.Navigation("EmployeeInformation");

                    b.Navigation("Invoice");

                    b.Navigation("PayRollType");

                    b.Navigation("PaymentPartner");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.PaySlip", b =>
                {
                    b.HasOne("TimesheetBE.Models.AppModels.EmployeeInformation", "EmployeeInformation")
                        .WithMany()
                        .HasForeignKey("EmployeeInformationId")
                        .HasConstraintName("fK_paySlips_employeeInformation_employeeInformationId");

                    b.HasOne("TimesheetBE.Models.AppModels.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_paySlips_invoices_invoiceId");

                    b.Navigation("EmployeeInformation");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ProjectSubTask", b =>
                {
                    b.HasOne("TimesheetBE.Models.AppModels.ProjectTaskAsignee", "ProjectTaskAsignee")
                        .WithMany("SubTasks")
                        .HasForeignKey("ProjectTaskAsigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_projectSubTasks_projectTaskAsignees_projectTaskAsigneeId");

                    b.HasOne("TimesheetBE.Models.AppModels.ProjectTask", "ProjectTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_projectSubTasks_projectTasks_projectTaskId");

                    b.Navigation("ProjectTask");

                    b.Navigation("ProjectTaskAsignee");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ProjectTaskAsignee", b =>
                {
                    b.HasOne("TimesheetBE.Models.AppModels.Project", "Project")
                        .WithMany("Assignees")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fK_projectTaskAsignees_projects_projectId");

                    b.HasOne("TimesheetBE.Models.AppModels.ProjectTask", "ProjectTask")
                        .WithMany("Assignees")
                        .HasForeignKey("ProjectTaskId")
                        .HasConstraintName("fK_projectTaskAsignees_projectTasks_projectTaskId");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_projectTaskAsignees_users_userId");

                    b.Navigation("Project");

                    b.Navigation("ProjectTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ProjectTimesheet", b =>
                {
                    b.HasOne("TimesheetBE.Models.AppModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fK_projectTimesheets_projects_projectId");

                    b.HasOne("TimesheetBE.Models.AppModels.ProjectSubTask", "ProjectSubTask")
                        .WithMany("ProjectTimesheets")
                        .HasForeignKey("ProjectSubTaskId")
                        .HasConstraintName("fK_projectTimesheets_projectSubTasks_projectSubTaskId");

                    b.HasOne("TimesheetBE.Models.AppModels.ProjectTaskAsignee", "ProjectTaskAsignee")
                        .WithMany()
                        .HasForeignKey("ProjectTaskAsigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_projectTimesheets_projectTaskAsignees_projectTaskAsigneeId");

                    b.HasOne("TimesheetBE.Models.AppModels.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .HasConstraintName("fK_projectTimesheets_projectTasks_projectTaskId");

                    b.HasOne("TimesheetBE.Models.AppModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fK_projectTimesheets_statuses_statusId");

                    b.Navigation("Project");

                    b.Navigation("ProjectSubTask");

                    b.Navigation("ProjectTask");

                    b.Navigation("ProjectTaskAsignee");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Shift", b =>
                {
                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_shifts_users_userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Swap", b =>
                {
                    b.HasOne("TimesheetBE.Models.AppModels.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_swaps_shifts_shiftId");

                    b.HasOne("TimesheetBE.Models.AppModels.Shift", "ShiftToSwap")
                        .WithMany()
                        .HasForeignKey("ShiftToSwapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_swaps_shifts_shiftToSwapId");

                    b.HasOne("TimesheetBE.Models.AppModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_swaps_statuses_statusId");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "Swapee")
                        .WithMany()
                        .HasForeignKey("SwapeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_swaps_users_swapeeId");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "Swapper")
                        .WithMany()
                        .HasForeignKey("SwapperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_swaps_users_swapperId");

                    b.Navigation("Shift");

                    b.Navigation("ShiftToSwap");

                    b.Navigation("Status");

                    b.Navigation("Swapee");

                    b.Navigation("Swapper");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.TimeSheet", b =>
                {
                    b.HasOne("TimesheetBE.Models.AppModels.EmployeeInformation", "EmployeeInformation")
                        .WithMany()
                        .HasForeignKey("EmployeeInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_timeSheets_employeeInformation_employeeInformationId");

                    b.HasOne("TimesheetBE.Models.AppModels.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fK_timeSheets_statuses_statusId");

                    b.Navigation("EmployeeInformation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TimesheetBE.Models.IdentityModels.User", b =>
                {
                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "Client")
                        .WithMany("Supervisors")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fK_Users_Users_clientId");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "CreatedBy")
                        .WithOne()
                        .HasForeignKey("TimesheetBE.Models.IdentityModels.User", "CreatedById")
                        .HasConstraintName("fK_Users_Users_createdById");

                    b.HasOne("TimesheetBE.Models.IdentityModels.User", "SuperAdmin")
                        .WithMany("UsersCreatedByYou")
                        .HasForeignKey("SuperAdminId")
                        .HasConstraintName("fK_Users_Users_superAdminId");

                    b.Navigation("Client");

                    b.Navigation("CreatedBy");

                    b.Navigation("SuperAdmin");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.EmployeeInformation", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Invoice", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ClientInvoiceChildren");

                    b.Navigation("Expense");

                    b.Navigation("Expenses");

                    b.Navigation("Payrolls");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.Project", b =>
                {
                    b.Navigation("Assignees");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ProjectSubTask", b =>
                {
                    b.Navigation("ProjectTimesheets");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ProjectTask", b =>
                {
                    b.Navigation("Assignees");

                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("TimesheetBE.Models.AppModels.ProjectTaskAsignee", b =>
                {
                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("TimesheetBE.Models.IdentityModels.User", b =>
                {
                    b.Navigation("EmployeeInformation");

                    b.Navigation("Payees");

                    b.Navigation("Supervisees");

                    b.Navigation("Supervisors");

                    b.Navigation("TeamMembers");

                    b.Navigation("UsersCreatedByYou");
                });
#pragma warning restore 612, 618
        }
    }
}
